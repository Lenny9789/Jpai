//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `TToast.bundle`.
    static let tToastBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TToast", pathExtension: "bundle")

    /// `bundle.url(forResource: "TToast", withExtension: "bundle")`
    static func tToastBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tToastBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 34 images.
  struct image {
    /// Image `ScanLine`.
    static let scanLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScanLine")
    /// Image `ScanNet`.
    static let scanNet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScanNet")
    /// Image `chating_footer_add`.
    static let chating_footer_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "chating_footer_add")
    /// Image `chating_footer_audio`.
    static let chating_footer_audio = Rswift.ImageResource(bundle: R.hostingBundle, name: "chating_footer_audio")
    /// Image `chating_footer_emoji`.
    static let chating_footer_emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "chating_footer_emoji")
    /// Image `chatroom_msg_receiver_bubble_normal`.
    static let chatroom_msg_receiver_bubble_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_bubble_normal")
    /// Image `chatroom_msg_receiver_bubble_pressed`.
    static let chatroom_msg_receiver_bubble_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_bubble_pressed")
    /// Image `chatroom_msg_receiver_voice_play_1`.
    static let chatroom_msg_receiver_voice_play_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_voice_play_1")
    /// Image `chatroom_msg_receiver_voice_play_2`.
    static let chatroom_msg_receiver_voice_play_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_voice_play_2")
    /// Image `chatroom_msg_receiver_voice_play_3`.
    static let chatroom_msg_receiver_voice_play_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_voice_play_3")
    /// Image `chatroom_msg_receiver_voice`.
    static let chatroom_msg_receiver_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_receiver_voice")
    /// Image `chatroom_msg_sender_bubble_normal`.
    static let chatroom_msg_sender_bubble_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_bubble_normal")
    /// Image `chatroom_msg_sender_bubble_pressed`.
    static let chatroom_msg_sender_bubble_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_bubble_pressed")
    /// Image `chatroom_msg_sender_voice_play_1`.
    static let chatroom_msg_sender_voice_play_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_voice_play_1")
    /// Image `chatroom_msg_sender_voice_play_2`.
    static let chatroom_msg_sender_voice_play_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_voice_play_2")
    /// Image `chatroom_msg_sender_voice_play_3`.
    static let chatroom_msg_sender_voice_play_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_voice_play_3")
    /// Image `chatroom_msg_sender_voice`.
    static let chatroom_msg_sender_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_sender_voice")
    /// Image `chatroom_msg_state_error`.
    static let chatroom_msg_state_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatroom_msg_state_error")
    /// Image `comment_close_btn`.
    static let comment_close_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment_close_btn")
    /// Image `flashOff`.
    static let flashOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashOff")
    /// Image `flashOn`.
    static let flashOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashOn")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `memorial_navbar_dismiss`.
    static let memorial_navbar_dismiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "memorial_navbar_dismiss")
    /// Image `memorial_toolbar_pause`.
    static let memorial_toolbar_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "memorial_toolbar_pause")
    /// Image `memorial_toolbar_play`.
    static let memorial_toolbar_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "memorial_toolbar_play")
    /// Image `message_nav_back`.
    static let message_nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_nav_back")
    /// Image `tabbar_contact_normal`.
    static let tabbar_contact_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_contact_normal")
    /// Image `tabbar_contact_selected`.
    static let tabbar_contact_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_contact_selected")
    /// Image `tabbar_message_normal`.
    static let tabbar_message_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_normal")
    /// Image `tabbar_message_selected`.
    static let tabbar_message_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_selected")
    /// Image `tabbar_profile_normal`.
    static let tabbar_profile_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile_normal")
    /// Image `tabbar_profile_selected`.
    static let tabbar_profile_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile_selected")
    /// Image `tongxunlu2`.
    static let tongxunlu2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tongxunlu2")
    /// Image `tongxunlu`.
    static let tongxunlu = Rswift.ImageResource(bundle: R.hostingBundle, name: "tongxunlu")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScanLine", bundle: ..., traitCollection: ...)`
    static func scanLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScanNet", bundle: ..., traitCollection: ...)`
    static func scanNet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanNet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chating_footer_add", bundle: ..., traitCollection: ...)`
    static func chating_footer_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chating_footer_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chating_footer_audio", bundle: ..., traitCollection: ...)`
    static func chating_footer_audio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chating_footer_audio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chating_footer_emoji", bundle: ..., traitCollection: ...)`
    static func chating_footer_emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chating_footer_emoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_bubble_normal", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_bubble_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_bubble_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_bubble_pressed", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_bubble_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_bubble_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_voice", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_voice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_voice_play_1", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_voice_play_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_voice_play_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_voice_play_2", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_voice_play_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_voice_play_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_receiver_voice_play_3", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_receiver_voice_play_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_receiver_voice_play_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_bubble_normal", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_bubble_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_bubble_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_bubble_pressed", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_bubble_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_bubble_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_voice", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_voice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_voice_play_1", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_voice_play_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_voice_play_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_voice_play_2", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_voice_play_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_voice_play_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_sender_voice_play_3", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_sender_voice_play_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_sender_voice_play_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatroom_msg_state_error", bundle: ..., traitCollection: ...)`
    static func chatroom_msg_state_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatroom_msg_state_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment_close_btn", bundle: ..., traitCollection: ...)`
    static func comment_close_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_close_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flashOff", bundle: ..., traitCollection: ...)`
    static func flashOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flashOn", bundle: ..., traitCollection: ...)`
    static func flashOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memorial_navbar_dismiss", bundle: ..., traitCollection: ...)`
    static func memorial_navbar_dismiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memorial_navbar_dismiss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memorial_toolbar_pause", bundle: ..., traitCollection: ...)`
    static func memorial_toolbar_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memorial_toolbar_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memorial_toolbar_play", bundle: ..., traitCollection: ...)`
    static func memorial_toolbar_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memorial_toolbar_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_nav_back", bundle: ..., traitCollection: ...)`
    static func message_nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_nav_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_contact_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_contact_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_contact_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_contact_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_contact_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_contact_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_message_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_message_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_message_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_message_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_profile_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_profile_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tongxunlu", bundle: ..., traitCollection: ...)`
    static func tongxunlu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tongxunlu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tongxunlu2", bundle: ..., traitCollection: ...)`
    static func tongxunlu2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tongxunlu2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `HeaderVC`.
    static let headerVC = _R.nib._HeaderVC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HeaderVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headerVC) instead")
    static func headerVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerVC)
    }
    #endif

    static func headerVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.headerVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.ttKitLocalizable` struct is generated, and contains static references to 21 localization keys.
    struct ttKitLocalizable {
      /// Value:  当前控制器：
      static let current_controller = Rswift.StringResource(key: "current_controller", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 上传失败
      static let upload_failed = Rswift.StringResource(key: "upload_failed", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 令牌过期
      static let token_expired = Rswift.StringResource(key: "token_expired", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 分钟
      static let minutes = Rswift.StringResource(key: "minutes", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 刚刚
      static let just = Rswift.StringResource(key: "just", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 天
      static let days = Rswift.StringResource(key: "days", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 小时
      static let hours = Rswift.StringResource(key: "hours", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 年
      static let years = Rswift.StringResource(key: "years", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 无效的数据
      static let invalid_data = Rswift.StringResource(key: "invalid_data", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 无法解析数据
      static let un_uesolved = Rswift.StringResource(key: "un_uesolved", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昨天
      static let yesterday = Rswift.StringResource(key: "yesterday", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 月
      static let months = Rswift.StringResource(key: "months", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未携带令牌
      static let token_empty = Rswift.StringResource(key: "token_empty", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未检测到微信客户端，请安装后重试。
      static let uninstall_wechat = Rswift.StringResource(key: "uninstall_wechat", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未检测到支付宝客户端，请安装后重试。
      static let uninstall_alipay = Rswift.StringResource(key: "uninstall_alipay", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 温馨提示
      static let tips_kit = Rswift.StringResource(key: "tips_kit", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 的
      static let of = Rswift.StringResource(key: "of", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 秒
      static let seconds = Rswift.StringResource(key: "seconds", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 立即安装
      static let install_now = Rswift.StringResource(key: "install_now", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 网络不给力，请稍后再试～
      static let net_connect_lost = Rswift.StringResource(key: "net_connect_lost", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请求取消
      static let request_canceled = Rswift.StringResource(key: "request_canceled", tableName: "TTKitLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  当前控制器：
      static func current_controller(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current_controller", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "current_controller"
        }

        return NSLocalizedString("current_controller", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 上传失败
      static func upload_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload_failed", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "upload_failed"
        }

        return NSLocalizedString("upload_failed", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 令牌过期
      static func token_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token_expired", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "token_expired"
        }

        return NSLocalizedString("token_expired", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 分钟
      static func minutes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minutes", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "minutes"
        }

        return NSLocalizedString("minutes", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 刚刚
      static func just(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("just", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "just"
        }

        return NSLocalizedString("just", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 天
      static func days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("days", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "days"
        }

        return NSLocalizedString("days", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 小时
      static func hours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hours", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "hours"
        }

        return NSLocalizedString("hours", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 年
      static func years(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("years", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "years"
        }

        return NSLocalizedString("years", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 无效的数据
      static func invalid_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_data", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "invalid_data"
        }

        return NSLocalizedString("invalid_data", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 无法解析数据
      static func un_uesolved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("un_uesolved", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "un_uesolved"
        }

        return NSLocalizedString("un_uesolved", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 昨天
      static func yesterday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yesterday", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "yesterday"
        }

        return NSLocalizedString("yesterday", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 月
      static func months(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("months", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "months"
        }

        return NSLocalizedString("months", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 未携带令牌
      static func token_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("token_empty", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "token_empty"
        }

        return NSLocalizedString("token_empty", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 未检测到微信客户端，请安装后重试。
      static func uninstall_wechat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uninstall_wechat", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "uninstall_wechat"
        }

        return NSLocalizedString("uninstall_wechat", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 未检测到支付宝客户端，请安装后重试。
      static func uninstall_alipay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uninstall_alipay", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "uninstall_alipay"
        }

        return NSLocalizedString("uninstall_alipay", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 温馨提示
      static func tips_kit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tips_kit", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "tips_kit"
        }

        return NSLocalizedString("tips_kit", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 的
      static func of(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("of", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "of"
        }

        return NSLocalizedString("of", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 秒
      static func seconds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seconds", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "seconds"
        }

        return NSLocalizedString("seconds", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 立即安装
      static func install_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("install_now", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "install_now"
        }

        return NSLocalizedString("install_now", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 网络不给力，请稍后再试～
      static func net_connect_lost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("net_connect_lost", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "net_connect_lost"
        }

        return NSLocalizedString("net_connect_lost", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      /// Value: 请求取消
      static func request_canceled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request_canceled", tableName: "TTKitLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TTKitLocalizable", preferredLanguages: preferredLanguages) else {
          return "request_canceled"
        }

        return NSLocalizedString("request_canceled", tableName: "TTKitLocalizable", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HeaderVC.validate()
    }

    struct _HeaderVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HeaderVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back' is used in nib 'HeaderVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
